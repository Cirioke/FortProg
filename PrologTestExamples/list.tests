append(Xs,Ys,[2,1]), append(Ys,Xs,[1,2])
One solution, "{Xs -> [2], Ys -> [1]}".

append(X,Y,[1,2])
Three solutions, "{X -> [], Y -> [1, 2]}",

append(_,_,[1,2])
Three times the empty substitution.

last([1,2,3],X)
One solution, "{X -> 3}".

last(Xs,3)
Infinite solutions, lists with 3 as a last element.

reverse([1,2,3],Xs)
One solution, "{Xs -> [3, 2, 1]}".

reverse(Xs,[1,2,3])
One solution, "{Xs -> [3, 2, 1]}", but non-termination.

reverse(Xs,Xs)
Infinite solutions, all palindroms.

member(X,[1,2,3])
Three solutions, "{X -> 1}", "{X -> 2}", and "{X -> 3}".

member(X,Xs)
Infinite solutions, where X is within the lists.

delete(X,[1,2,L],Y)
Three solutions, "{X -> 1, Y -> [2, L]}",

sort([3,1,2],Xs)
One solution, "{Xs -> [1, 2, 3]}".

append(X,Y,X)
Infinite solutions, where Y is the empty list.

length(Xs,2)
One solution, "{Xs -> [_, _]}", but non-termination.

lengthP(Xs,s(s(o)))
One solution, "{Xs -> [_, _]}".

maplist(last,[[1,2,3,4],[_,2]],Xs)
One solution, "{Xs -> [4, 2]}".

concatlist([[1,2,3],[4]],Xs)
One solution, "{Xs -> [1, 2, 3, 4]}".

concatmaplist(=,[[1,2,3,4],[_,2]],Xs)
One solution, "{Xs -> [1, 2, 3, 4, Z, 2]}" or some

findall(X,member(X,[1,true,[]]),Xs)
One solution, "{Xs -> [1, true, []]}".

findall(true,member(X,[_,_]),Xs)
One solution, "{Xs -> [true, true]}".

findall([X],append(_,_,[_,_]),Xs)
One solution, "{Xs -> [[C], [B], [A]]}" or some

append(_As,Bs,[1,2,3]),append(Cs,Ds,_As)
Ten solutions, namely all splittings of "[1, 2, 3]" into

